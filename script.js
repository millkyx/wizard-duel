class WizardDuel {
    constructor() {
        this.gridSize = 15;
        this.board = Array(this.gridSize).fill().map(() => Array(this.gridSize).fill(null));
        this.engine = new WizardEngine(this.gridSize);
        this.currentPlayer = 'moon';
        this.gameOver = false;
        this.winLength = 5;
        this.setupBoard();
        this.initializeControls();
        gameEngine = this.engine; // –°–æ—Ö—Ä–∞–Ω—è–µ–º engine –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    }

    setupBoard() {
        const gameBoard = document.getElementById('game-board');
        gameBoard.innerHTML = '';
        
        for (let i = 0; i < this.gridSize; i++) {
            for (let j = 0; j < this.gridSize; j++) {
                const cell = document.createElement('div');
                cell.className = 'cell';
                cell.dataset.row = i;
                cell.dataset.col = j;
                cell.addEventListener('click', () => this.makeMove(i, j));
                gameBoard.appendChild(cell);
            }
        }
        
        this.updateStatus('–•–æ–¥ –ª—É–Ω—ã');
    }

    initializeControls() {
        const analyzeButton = document.getElementById('analyzeButton');
        const depthSelect = document.getElementById('depthSelect');
        
        analyzeButton.addEventListener('click', () => {
            this.clearSuggestions();
            const depth = parseInt(depthSelect.value);
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
            this.engine.board = JSON.parse(JSON.stringify(this.board));
            this.analyzeMoves(depth);
        });
    }

    clearSuggestions() {
        document.querySelectorAll('.cell.suggestion').forEach(cell => {
            cell.classList.remove('suggestion', 'suggestion-best', 'suggestion-good', 'suggestion-neutral', 'suggestion-bad');
            cell.removeAttribute('data-score');
        });
    }

    analyzeMoves(depth) {
        console.time('Analysis');
        const analysis = this.engine.analyzeBestMove(depth, this.currentPlayer);
        console.timeEnd('Analysis');

        if (analysis.length === 0) {
            document.getElementById('analysis-results').innerHTML = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞';
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        const resultsDiv = document.getElementById('analysis-results');
        resultsDiv.innerHTML = `<strong>–¢–æ–ø 5 –ª—É—á—à–∏—Ö —Ö–æ–¥–æ–≤ –¥–ª—è ${this.currentPlayer === 'moon' ? '–ª—É–Ω—ã' : '—Å–æ–ª–Ω—Ü–∞'}:</strong><br>`;
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ö–æ–¥—ã –Ω–∞ –¥–æ—Å–∫–µ
        analysis.forEach((move, index) => {
            const cell = document.querySelector(`[data-row="${move.row}"][data-col="${move.col}"]`);
            if (cell && !this.board[move.row][move.col]) {
                cell.classList.add('suggestion');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
                const score = move.score;
                if (score >= 1000) {
                    cell.classList.add('suggestion-best');
                } else if (score >= 500) {
                    cell.classList.add('suggestion-good');
                } else {
                    cell.classList.add('suggestion-neutral');
                }
                
                cell.setAttribute('data-score', move.score);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            resultsDiv.innerHTML += `${index + 1}. –•–æ–¥: [${move.row}, ${move.col}], ` +
                `–û—Ü–µ–Ω–∫–∞: ${Math.round(move.score)}, ` +
                `${move.description}<br>`;
        });
    }

    makeMove(row, col) {
        if (this.gameOver || this.board[row][col]) return;

        this.board[row][col] = this.currentPlayer;
        this.engine.board[row][col] = this.currentPlayer;
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–≤–∏–∂–∫–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ö–æ–¥–µ
        this.engine.moveCache.add([row, col].toString());
        
        this.updateCell(row, col);
        this.clearSuggestions();

        if (this.checkWin(row, col)) {
            this.gameOver = true;
            this.updateStatus(`${this.currentPlayer === 'moon' ? '–õ—É–Ω–∞' : '–°–æ–ª–Ω—Ü–µ'} –ø–æ–±–µ–¥–∏–ª!`);
            return;
        }

        this.currentPlayer = this.currentPlayer === 'moon' ? 'sun' : 'moon';
        this.updateStatus(`–•–æ–¥ ${this.currentPlayer === 'moon' ? '–ª—É–Ω—ã' : '—Å–æ–ª–Ω—Ü–∞'}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
        const depth = parseInt(document.getElementById('depthSelect').value);
        this.analyzeMoves(depth);
    }

    checkWin(row, col) {
        const directions = [
            [[0, 1], [0, -1]], // horizontal
            [[1, 0], [-1, 0]], // vertical
            [[1, 1], [-1, -1]], // diagonal
            [[1, -1], [-1, 1]] // anti-diagonal
        ];

        return directions.some(dir => {
            const count = 1 + 
                this.countDirection(row, col, dir[0][0], dir[0][1]) +
                this.countDirection(row, col, dir[1][0], dir[1][1]);
            return count >= this.winLength;
        });
    }

    countDirection(row, col, dRow, dCol) {
        const player = this.board[row][col];
        let count = 0;
        let currentRow = row + dRow;
        let currentCol = col + dCol;

        while (
            currentRow >= 0 && currentRow < this.gridSize &&
            currentCol >= 0 && currentCol < this.gridSize &&
            this.board[currentRow][currentCol] === player
        ) {
            count++;
            currentRow += dRow;
            currentCol += dCol;
        }

        return count;
    }

    updateCell(row, col) {
        const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
        cell.classList.add(this.board[row][col]);
    }

    updateStatus(message) {
        document.getElementById('status').textContent = message;
    }

    updateUI() {
        const analysisResults = document.getElementById('analysis-results');
        if (!analysisResults) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ö–æ–¥—ã –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        const moonMoves = this.engine.analyzeBestMove(4, 'moon');
        const sunMoves = this.engine.analyzeBestMove(4, 'sun');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analysisResults.innerHTML = `
            <div class="moon-moves">
                <h3>üåô –¢–æ–ø 5 —Ö–æ–¥–æ–≤ –¥–ª—è –ª—É–Ω—ã:</h3>
                ${moonMoves.map((move, index) => 
                    `${index + 1}. –•–æ–¥: [${move.row}, ${move.col}], ` +
                    `–û—Ü–µ–Ω–∫–∞: ${Math.round(move.score)}, ` +
                    `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${move.description}`
                ).join('<br>')}
            </div>
            <br>
            <div class="sun-moves">
                <h3>‚òÄÔ∏è –¢–æ–ø 5 —Ö–æ–¥–æ–≤ –¥–ª—è —Å–æ–ª–Ω—Ü–∞:</h3>
                ${sunMoves.map((move, index) => 
                    `${index + 1}. –•–æ–¥: [${move.row}, ${move.col}], ` +
                    `–û—Ü–µ–Ω–∫–∞: ${Math.round(move.score)}, ` +
                    `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${move.description}`
                ).join('<br>')}
            </div>
        `;
    }
}

class WizardEngine {
    constructor(size = 15) {
        this.gridSize = size;
        this.board = Array(size).fill().map(() => Array(size).fill(null));
        this.winLength = 5;
        this.patterns = {
            win: ['XXXXX'],
            mustBlock: ['XXXX_', '_XXXX', 'XXX_X', 'X_XXX'], 
            urgent: ['XX_XX', '_XXX_', 'XX__X'], 
        };
        this.moveCache = new Set();
        this.centerPoint = Math.floor(size / 2);
    }

    analyzeBestMove(depth, player) {
        const opponent = player === 'moon' ? 'sun' : 'moon';
        
        // 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π —Ö–æ–¥
        const winningMove = this.findWinningMove(player);
        if (winningMove) {
            return [winningMove];
        }

        // 2. –ó–∞—Ç–µ–º –∏—â–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–æ–±–µ–¥—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        const blockingMove = this.findWinningMove(opponent);
        if (blockingMove) {
            blockingMove.score = 900;
            blockingMove.description = "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–±–µ–¥—ã";
            return [blockingMove];
        }

        // 3. –ò—â–µ–º —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã
        const threatMoves = this.findThreats(player, opponent);
        if (threatMoves.length > 0) {
            return threatMoves;
        }

        // 4. –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ —Ö–æ–¥–æ–≤
        return this.findNormalMoves(player, opponent, depth);
    }

    findWinningMove(player) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø–æ–±–µ–¥—É
        for (let i = 0; i < this.gridSize; i++) {
            for (let j = 0; j < this.gridSize; j++) {
                if (!this.board[i][j]) {
                    this.board[i][j] = player;
                    if (this.checkWin(i, j, player)) {
                        this.board[i][j] = null;
                        return {
                            row: i,
                            col: j,
                            score: 1000,
                            description: "–ü–æ–±–µ–¥–Ω—ã–π —Ö–æ–¥"
                        };
                    }
                    this.board[i][j] = null;
                }
            }
        }
        return null;
    }

    findThreats(player, opponent) {
        const threats = [];
        const searchArea = this.getRelevantMoves();

        for (const [row, col] of searchArea) {
            if (!this.board[row][col]) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–≥—Ä–æ–∑—ã
                const threatScore = this.evaluateThreat(row, col, player);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —É–≥—Ä–æ–∑—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                const blockScore = this.evaluateThreat(row, col, opponent);
                
                const score = Math.max(threatScore, blockScore);
                if (score > 300) {
                    threats.push({
                        row, col,
                        score: score,
                        description: score === threatScore ? "–°–æ–∑–¥–∞–Ω–∏–µ —É–≥—Ä–æ–∑—ã" : "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–≥—Ä–æ–∑—ã"
                    });
                }
            }
        }

        return threats.sort((a, b) => b.score - a.score).slice(0, 5);
    }

    findNormalMoves(player, opponent, depth) {
        const moves = [];
        const searchArea = this.getRelevantMoves();

        for (const [row, col] of searchArea) {
            if (!this.board[row][col]) {
                const score = this.evaluatePosition(row, col, player, opponent);
                if (score > 0) {
                    moves.push({
                        row, col,
                        score: score,
                        description: this.getDescription(score)
                    });
                }
            }
        }

        return moves.sort((a, b) => b.score - a.score).slice(0, 5);
    }

    getRelevantMoves() {
        const moves = new Set();
        
        // –ò—â–µ–º —Ö–æ–¥—ã –≤–æ–∫—Ä—É–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–≥—É—Ä
        for (let i = 0; i < this.gridSize; i++) {
            for (let j = 0; j < this.gridSize; j++) {
                if (this.board[i][j]) {
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
                    for (let di = -2; di <= 2; di++) {
                        for (let dj = -2; dj <= 2; dj++) {
                            const newRow = i + di;
                            const newCol = j + dj;
                            if (this.isValidCell(newRow, newCol) && !this.board[newRow][newCol]) {
                                moves.add([newRow, newCol].toString());
                            }
                        }
                    }
                }
            }
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç —Ö–æ–¥–æ–≤ - –≤–µ—Ä–Ω—É—Ç—å —Ü–µ–Ω—Ç—Ä –∏ –∫–ª–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥
        if (moves.size === 0) {
            const center = Math.floor(this.gridSize / 2);
            moves.add([center, center].toString());
            for (let di = -1; di <= 1; di++) {
                for (let dj = -1; dj <= 1; dj++) {
                    moves.add([center + di, center + dj].toString());
                }
            }
        }

        return Array.from(moves).map(pos => pos.split(',').map(Number));
    }

    evaluateThreat(row, col, player) {
        this.board[row][col] = player;
        let maxThreat = 0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const directions = [[1,0], [0,1], [1,1], [1,-1]];
        
        for (const [dx, dy] of directions) {
            const line = this.getLine(row, col, dx, dy, player);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É–≥—Ä–æ–∑
            if (this.matchesPattern(line, this.patterns.mustBlock)) {
                maxThreat = Math.max(maxThreat, 800);
            } else if (this.matchesPattern(line, this.patterns.urgent)) {
                maxThreat = Math.max(maxThreat, 400);
            }
        }

        this.board[row][col] = null;
        return maxThreat;
    }

    evaluatePosition(row, col, player, opponent) {
        let score = 0;
        
        // –û—Ü–µ–Ω–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
        const distToCenter = Math.max(
            Math.abs(row - this.centerPoint),
            Math.abs(col - this.centerPoint)
        );
        score += (10 - distToCenter) * 2;

        // –û—Ü–µ–Ω–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ñ–∏–≥—É—Ä
        let playerPieces = 0;
        let opponentPieces = 0;
        
        for (let i = -1; i <= 1; i++) {
            for (let j = -1; j <= 1; j++) {
                if (i === 0 && j === 0) continue;
                const r = row + i;
                const c = col + j;
                if (this.isValidCell(r, c)) {
                    if (this.board[r][c] === player) playerPieces++;
                    else if (this.board[r][c] === opponent) opponentPieces++;
                }
            }
        }
        
        score += playerPieces * 15;
        score += opponentPieces * 10;

        return score;
    }

    getLine(row, col, dx, dy, player) {
        let line = '';
        const opponent = player === 'moon' ? 'sun' : 'moon';

        // –°–º–æ—Ç—Ä–∏–º –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç —Ç–æ—á–∫–∏
        for (let dir = -4; dir <= 4; dir++) {
            const r = row + dir * dx;
            const c = col + dir * dy;
            if (this.isValidCell(r, c)) {
                if (this.board[r][c] === player) line += 'X';
                else if (this.board[r][c] === opponent) line += 'O';
                else line += '_';
            }
        }

        return line;
    }

    matchesPattern(line, patterns) {
        return patterns.some(pattern => line.includes(pattern));
    }

    isValidCell(row, col) {
        return row >= 0 && row < this.gridSize && col >= 0 && col < this.gridSize;
    }

    getDescription(score) {
        if (score >= 1000) return "–ü–æ–±–µ–¥–Ω—ã–π —Ö–æ–¥";
        if (score >= 800) return "–§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–±–µ–¥–∞";
        if (score >= 600) return "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–≥—Ä–æ–∑—ã";
        if (score >= 400) return "–°–∏–ª—å–Ω–∞—è —É–≥—Ä–æ–∑–∞";
        if (score >= 200) return "–†–∞–∑–≤–∏—Ç–∏–µ –∞—Ç–∞–∫–∏";
        return "–ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π —Ö–æ–¥";
    }

    checkWin(row, col, player) {
        const directions = [[1,0], [0,1], [1,1], [1,-1]];
        
        return directions.some(([dx, dy]) => {
            let count = 1;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
            let r = row + dx;
            let c = col + dy;
            while (this.isValidCell(r, c) && this.board[r][c] === player) {
                count++;
                r += dx;
                c += dy;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É
            r = row - dx;
            c = col - dy;
            while (this.isValidCell(r, c) && this.board[r][c] === player) {
                count++;
                r -= dx;
                c -= dy;
            }
            
            return count >= this.winLength;
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∏–≥—Ä—ã
let gameEngine;

// Start the game
new WizardDuel();
